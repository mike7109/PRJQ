
lesson_5_array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000000b6  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062c  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000558  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000012f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 eb       	ldi	r30, 0xB6	; 182
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	33 c0       	rjmp	.+102    	; 0xb2 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:



int main(void)
{
    SEG7_DDR = 0b11111111;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	81 bb       	out	0x11, r24	; 17
    SEG7_PORT = 0b00000000;
  52:	12 ba       	out	0x12, r1	; 18

    while (1)
    {
        
       for (int i = 0; i < 10; i++)
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	11 c0       	rjmp	.+34     	; 0x7c <main+0x2e>
       {
            SEG7_PORT = digits[i];
  5a:	fc 01       	movw	r30, r24
  5c:	ee 0f       	add	r30, r30
  5e:	ff 1f       	adc	r31, r31
  60:	e0 5a       	subi	r30, 0xA0	; 160
  62:	ff 4f       	sbci	r31, 0xFF	; 255
  64:	20 81       	ld	r18, Z
  66:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	2f e5       	ldi	r18, 0x5F	; 95
  6a:	3a ee       	ldi	r19, 0xEA	; 234
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	21 50       	subi	r18, 0x01	; 1
  70:	30 40       	sbci	r19, 0x00	; 0
  72:	40 40       	sbci	r20, 0x00	; 0
  74:	e1 f7       	brne	.-8      	; 0x6e <main+0x20>
  76:	00 c0       	rjmp	.+0      	; 0x78 <main+0x2a>
  78:	00 00       	nop
    SEG7_PORT = 0b00000000;

    while (1)
    {
        
       for (int i = 0; i < 10; i++)
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	8a 30       	cpi	r24, 0x0A	; 10
  7e:	91 05       	cpc	r25, r1
  80:	64 f3       	brlt	.-40     	; 0x5a <main+0xc>
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	11 c0       	rjmp	.+34     	; 0xaa <main+0x5c>
            SEG7_PORT = digits[i];
            _delay_ms(300);
       }
       for (int i = 8; i >= 1; i--)
       {
           SEG7_PORT = digits[i];
  88:	fc 01       	movw	r30, r24
  8a:	ee 0f       	add	r30, r30
  8c:	ff 1f       	adc	r31, r31
  8e:	e0 5a       	subi	r30, 0xA0	; 160
  90:	ff 4f       	sbci	r31, 0xFF	; 255
  92:	20 81       	ld	r18, Z
  94:	22 bb       	out	0x12, r18	; 18
  96:	2f e5       	ldi	r18, 0x5F	; 95
  98:	3a ee       	ldi	r19, 0xEA	; 234
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	40 40       	sbci	r20, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x4e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x58>
  a6:	00 00       	nop
       for (int i = 0; i < 10; i++)
       {
            SEG7_PORT = digits[i];
            _delay_ms(300);
       }
       for (int i = 8; i >= 1; i--)
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	18 16       	cp	r1, r24
  ac:	19 06       	cpc	r1, r25
  ae:	64 f3       	brlt	.-40     	; 0x88 <main+0x3a>
  b0:	d1 cf       	rjmp	.-94     	; 0x54 <main+0x6>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
