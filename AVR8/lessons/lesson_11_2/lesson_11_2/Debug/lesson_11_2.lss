
lesson_11_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000001f4  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800074  00800074  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005de  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000532  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027d  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002dc  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ba  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	6b c0       	rjmp	.+214    	; 0xea <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ef       	ldi	r30, 0xF4	; 244
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 37       	cpi	r26, 0x7C	; 124
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ab d0       	rcall	.+342    	; 0x1b0 <main>
  5a:	ca c0       	rjmp	.+404    	; 0x1f0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <chislo>:
     0b01101111  //9
 };


 void chislo (unsigned int vse_chislo)
 {
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ac 01       	movw	r20, r24
     r1_100 = vse_chislo/100;    // сотни
  64:	ec 01       	movw	r28, r24
  66:	d6 95       	lsr	r29
  68:	c7 95       	ror	r28
  6a:	d6 95       	lsr	r29
  6c:	c7 95       	ror	r28
  6e:	9e 01       	movw	r18, r28
  70:	ab e7       	ldi	r26, 0x7B	; 123
  72:	b4 e1       	ldi	r27, 0x14	; 20
  74:	b1 d0       	rcall	.+354    	; 0x1d8 <__umulhisi3>
  76:	fc 01       	movw	r30, r24
  78:	f6 95       	lsr	r31
  7a:	e7 95       	ror	r30
  7c:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <r1_100+0x1>
  80:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <r1_100>
     r2_10  = vse_chislo%100/10; // десятки
  84:	24 e6       	ldi	r18, 0x64	; 100
  86:	2e 9f       	mul	r18, r30
  88:	c0 01       	movw	r24, r0
  8a:	2f 9f       	mul	r18, r31
  8c:	90 0d       	add	r25, r0
  8e:	11 24       	eor	r1, r1
  90:	9a 01       	movw	r18, r20
  92:	28 1b       	sub	r18, r24
  94:	39 0b       	sbc	r19, r25
  96:	ad ec       	ldi	r26, 0xCD	; 205
  98:	bc ec       	ldi	r27, 0xCC	; 204
  9a:	9e d0       	rcall	.+316    	; 0x1d8 <__umulhisi3>
  9c:	96 95       	lsr	r25
  9e:	87 95       	ror	r24
  a0:	96 95       	lsr	r25
  a2:	87 95       	ror	r24
  a4:	96 95       	lsr	r25
  a6:	87 95       	ror	r24
  a8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <r2_10+0x1>
  ac:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <r2_10>
     r3_1   = vse_chislo%10;		// единицы
  b0:	9a 01       	movw	r18, r20
  b2:	92 d0       	rcall	.+292    	; 0x1d8 <__umulhisi3>
  b4:	96 95       	lsr	r25
  b6:	87 95       	ror	r24
  b8:	96 95       	lsr	r25
  ba:	87 95       	ror	r24
  bc:	96 95       	lsr	r25
  be:	87 95       	ror	r24
  c0:	9c 01       	movw	r18, r24
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	82 0f       	add	r24, r18
  d4:	93 1f       	adc	r25, r19
  d6:	9a 01       	movw	r18, r20
  d8:	28 1b       	sub	r18, r24
  da:	39 0b       	sbc	r19, r25
  dc:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <r3_1+0x1>
  e0:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <r3_1>
 }
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <__vector_9>:

 ISR(TIMER0_OVF_vect) {
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
    if (++z > 3 ) z = 1;
  fc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 100:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 10a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
 10e:	04 97       	sbiw	r24, 0x04	; 4
 110:	34 f0       	brlt	.+12     	; 0x11e <__vector_9+0x34>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 11a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>

    TCNT0 = 127;
 11e:	8f e7       	ldi	r24, 0x7F	; 127
 120:	82 bf       	out	0x32, r24	; 50
    if (z == 1) {
 122:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 126:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 05       	cpc	r25, r1
 12e:	89 f4       	brne	.+34     	; 0x152 <__vector_9+0x68>
        PORTB |= (1<<2) | (1<<1);	// Выключаем 2 и 3 разряды
 130:	88 b3       	in	r24, 0x18	; 24
 132:	86 60       	ori	r24, 0x06	; 6
 134:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<0);			// ВКлючаем 1 разряд
 136:	88 b3       	in	r24, 0x18	; 24
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r1_100];// Сотни
 13c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <r1_100>
 140:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <r1_100+0x1>
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e0 5a       	subi	r30, 0xA0	; 160
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	82 bb       	out	0x12, r24	; 18
 150:	26 c0       	rjmp	.+76     	; 0x19e <__vector_9+0xb4>
    } else if (z == 2) {
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	91 05       	cpc	r25, r1
 156:	89 f4       	brne	.+34     	; 0x17a <__vector_9+0x90>
        PORTB |= (1<<2) | (1<<0);	// Выключаем 1 и 3 разряды
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	85 60       	ori	r24, 0x05	; 5
 15c:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<1);			// ВКлючаем 2 разряд
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r2_10];	// Десятки
 164:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <r2_10>
 168:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <r2_10+0x1>
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	e0 5a       	subi	r30, 0xA0	; 160
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	80 81       	ld	r24, Z
 176:	82 bb       	out	0x12, r24	; 18
 178:	12 c0       	rjmp	.+36     	; 0x19e <__vector_9+0xb4>
    } else if (z == 3) {
 17a:	03 97       	sbiw	r24, 0x03	; 3
 17c:	81 f4       	brne	.+32     	; 0x19e <__vector_9+0xb4>
        PORTB |= (1<<1) | (1<<0);	// Выключаем 1 и 2 разряды
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	83 60       	ori	r24, 0x03	; 3
 182:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<2);			// ВКлючаем 3 разряд
 184:	88 b3       	in	r24, 0x18	; 24
 186:	8b 7f       	andi	r24, 0xFB	; 251
 188:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r3_1];	// Единицы
 18a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <r3_1>
 18e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <r3_1+0x1>
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e0 5a       	subi	r30, 0xA0	; 160
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	80 81       	ld	r24, Z
 19c:	82 bb       	out	0x12, r24	; 18
    }

 }
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <main>:

 int main(void)
 {
     
     SEG7_DDR = 0xff;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	81 bb       	out	0x11, r24	; 17
     SEG7_PORT = 0x00;
 1b4:	12 ba       	out	0x12, r1	; 18
     
     DDRB |= (1<<2) | (1<<1) | (1<<0);
 1b6:	87 b3       	in	r24, 0x17	; 23
 1b8:	87 60       	ori	r24, 0x07	; 7
 1ba:	87 bb       	out	0x17, r24	; 23
     PORTB |= (1<<2) | (1<<1) | (1<<0);
 1bc:	88 b3       	in	r24, 0x18	; 24
 1be:	87 60       	ori	r24, 0x07	; 7
 1c0:	88 bb       	out	0x18, r24	; 24

     TCCR0 = 0b00000010; // делитель на 8
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	83 bf       	out	0x33, r24	; 51
     TCNT0 = 0;
 1c6:	12 be       	out	0x32, r1	; 50

     TIMSK |= (1<<TOIE0);
 1c8:	89 b7       	in	r24, 0x39	; 57
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	89 bf       	out	0x39, r24	; 57

     sei();
 1ce:	78 94       	sei
     
     while (1)
     {
         chislo(531);
 1d0:	83 e1       	ldi	r24, 0x13	; 19
 1d2:	92 e0       	ldi	r25, 0x02	; 2
 1d4:	44 df       	rcall	.-376    	; 0x5e <chislo>
 1d6:	fc cf       	rjmp	.-8      	; 0x1d0 <main+0x20>

000001d8 <__umulhisi3>:
 1d8:	a2 9f       	mul	r26, r18
 1da:	b0 01       	movw	r22, r0
 1dc:	b3 9f       	mul	r27, r19
 1de:	c0 01       	movw	r24, r0
 1e0:	a3 9f       	mul	r26, r19
 1e2:	01 d0       	rcall	.+2      	; 0x1e6 <__umulhisi3+0xe>
 1e4:	b2 9f       	mul	r27, r18
 1e6:	70 0d       	add	r23, r0
 1e8:	81 1d       	adc	r24, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	91 1d       	adc	r25, r1
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
