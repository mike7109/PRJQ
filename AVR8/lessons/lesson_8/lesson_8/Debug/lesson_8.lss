
lesson_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800074  00800074  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ae  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058c  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000316  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e3  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ea       	ldi	r30, 0xA4	; 164
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 37       	cpi	r26, 0x7A	; 122
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	48 d0       	rcall	.+144    	; 0xea <main>
  5a:	a2 c0       	rjmp	.+324    	; 0x1a0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <chislo>:
    0b01101111  //9
};


void chislo (unsigned int vse_chislo)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ac 01       	movw	r20, r24
    r1_100 = vse_chislo/100;    // сотни
  64:	ec 01       	movw	r28, r24
  66:	d6 95       	lsr	r29
  68:	c7 95       	ror	r28
  6a:	d6 95       	lsr	r29
  6c:	c7 95       	ror	r28
  6e:	9e 01       	movw	r18, r28
  70:	ab e7       	ldi	r26, 0x7B	; 123
  72:	b4 e1       	ldi	r27, 0x14	; 20
  74:	89 d0       	rcall	.+274    	; 0x188 <__umulhisi3>
  76:	fc 01       	movw	r30, r24
  78:	f6 95       	lsr	r31
  7a:	e7 95       	ror	r30
  7c:	f0 93 79 00 	sts	0x0079, r31	; 0x800079 <r1_100+0x1>
  80:	e0 93 78 00 	sts	0x0078, r30	; 0x800078 <r1_100>
    r2_10  = vse_chislo%100/10; // десятки
  84:	24 e6       	ldi	r18, 0x64	; 100
  86:	2e 9f       	mul	r18, r30
  88:	c0 01       	movw	r24, r0
  8a:	2f 9f       	mul	r18, r31
  8c:	90 0d       	add	r25, r0
  8e:	11 24       	eor	r1, r1
  90:	9a 01       	movw	r18, r20
  92:	28 1b       	sub	r18, r24
  94:	39 0b       	sbc	r19, r25
  96:	ad ec       	ldi	r26, 0xCD	; 205
  98:	bc ec       	ldi	r27, 0xCC	; 204
  9a:	76 d0       	rcall	.+236    	; 0x188 <__umulhisi3>
  9c:	96 95       	lsr	r25
  9e:	87 95       	ror	r24
  a0:	96 95       	lsr	r25
  a2:	87 95       	ror	r24
  a4:	96 95       	lsr	r25
  a6:	87 95       	ror	r24
  a8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <r2_10+0x1>
  ac:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <r2_10>
    r3_1   = vse_chislo%10;		// единицы
  b0:	9a 01       	movw	r18, r20
  b2:	6a d0       	rcall	.+212    	; 0x188 <__umulhisi3>
  b4:	96 95       	lsr	r25
  b6:	87 95       	ror	r24
  b8:	96 95       	lsr	r25
  ba:	87 95       	ror	r24
  bc:	96 95       	lsr	r25
  be:	87 95       	ror	r24
  c0:	9c 01       	movw	r18, r24
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	82 0f       	add	r24, r18
  d4:	93 1f       	adc	r25, r19
  d6:	9a 01       	movw	r18, r20
  d8:	28 1b       	sub	r18, r24
  da:	39 0b       	sbc	r19, r25
  dc:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <__data_end+0x1>
  e0:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__data_end>
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <main>:

int main(void)
{
    
    SEG7_DDR = 0xff;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	81 bb       	out	0x11, r24	; 17
    SEG7_PORT = 0x00;
  ee:	12 ba       	out	0x12, r1	; 18
    
    DDRB |= (1<<2) | (1<<1) | (1<<0);
  f0:	87 b3       	in	r24, 0x17	; 23
  f2:	87 60       	ori	r24, 0x07	; 7
  f4:	87 bb       	out	0x17, r24	; 23
    PORTB &= ~((1<<2) | (1<<1) | (1<<0));
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	88 7f       	andi	r24, 0xF8	; 248
  fa:	88 bb       	out	0x18, r24	; 24
    
    while (1)
    {
        chislo(347);
  fc:	8b e5       	ldi	r24, 0x5B	; 91
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	ae df       	rcall	.-164    	; 0x5e <chislo>
        
        PORTB &= ~((1<<2) | (1<<1));	// Выключаем 2 и 3 разряды
 102:	88 b3       	in	r24, 0x18	; 24
 104:	89 7f       	andi	r24, 0xF9	; 249
 106:	88 bb       	out	0x18, r24	; 24
        PORTB |= (1<<0);			// ВКлючаем 1 разряд
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r1_100];// Сотни
 10e:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <r1_100>
 112:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <r1_100+0x1>
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e0 5a       	subi	r30, 0xA0	; 160
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
 120:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8d ee       	ldi	r24, 0xED	; 237
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x3c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x42>
 12c:	00 00       	nop
        _delay_ms(3);
        
        PORTB &= ~((1<<2) | (1<<0));	// Выключаем 1 и 3 разряды
 12e:	88 b3       	in	r24, 0x18	; 24
 130:	8a 7f       	andi	r24, 0xFA	; 250
 132:	88 bb       	out	0x18, r24	; 24
        PORTB |= (1<<1);			// ВКлючаем 2 разряд
 134:	88 b3       	in	r24, 0x18	; 24
 136:	82 60       	ori	r24, 0x02	; 2
 138:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r2_10];	// Десятки
 13a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <r2_10>
 13e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <r2_10+0x1>
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
 14c:	82 bb       	out	0x12, r24	; 18
 14e:	8d ee       	ldi	r24, 0xED	; 237
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x68>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x6e>
 158:	00 00       	nop
        _delay_ms(3);
        
        PORTB &= ~((1<<1) | (1<<0));	// Выключаем 1 и 2 разряды
 15a:	88 b3       	in	r24, 0x18	; 24
 15c:	8c 7f       	andi	r24, 0xFC	; 252
 15e:	88 bb       	out	0x18, r24	; 24
        PORTB |= (1<<2);			// ВКлючаем 3 разряд
 160:	88 b3       	in	r24, 0x18	; 24
 162:	84 60       	ori	r24, 0x04	; 4
 164:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r3_1];	// Единицы
 166:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 16a:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 5a       	subi	r30, 0xA0	; 160
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 81       	ld	r24, Z
 178:	82 bb       	out	0x12, r24	; 18
 17a:	8d ee       	ldi	r24, 0xED	; 237
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x94>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x9a>
 184:	00 00       	nop
 186:	ba cf       	rjmp	.-140    	; 0xfc <main+0x12>

00000188 <__umulhisi3>:
 188:	a2 9f       	mul	r26, r18
 18a:	b0 01       	movw	r22, r0
 18c:	b3 9f       	mul	r27, r19
 18e:	c0 01       	movw	r24, r0
 190:	a3 9f       	mul	r26, r19
 192:	01 d0       	rcall	.+2      	; 0x196 <__umulhisi3+0xe>
 194:	b2 9f       	mul	r27, r18
 196:	70 0d       	add	r23, r0
 198:	81 1d       	adc	r24, r1
 19a:	11 24       	eor	r1, r1
 19c:	91 1d       	adc	r25, r1
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
