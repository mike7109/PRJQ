
Lesson_8_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000514  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d5  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a2  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	12 c0       	rjmp	.+36     	; 0x5a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>


int main(void)
{
    DDRD = 0xff;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
    PORTD = 0x00;
  3c:	12 ba       	out	0x12, r1	; 18

    TCCR0 = 0b00000101; // делим 1024 бит.
  3e:	85 e0       	ldi	r24, 0x05	; 5
  40:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0;
  42:	12 be       	out	0x32, r1	; 50

    while (1) 
    {
        if (TCNT0 == 127) {
  44:	82 b7       	in	r24, 0x32	; 50
  46:	8f 37       	cpi	r24, 0x7F	; 127
  48:	11 f4       	brne	.+4      	; 0x4e <__SREG__+0xf>
            PORTD = 0b11000011;
  4a:	83 ec       	ldi	r24, 0xC3	; 195
  4c:	82 bb       	out	0x12, r24	; 18
        }

        if (TCNT0 == 255) {
  4e:	82 b7       	in	r24, 0x32	; 50
  50:	8f 3f       	cpi	r24, 0xFF	; 255
  52:	c1 f7       	brne	.-16     	; 0x44 <__SREG__+0x5>
            PORTD = 0b00111100;
  54:	8c e3       	ldi	r24, 0x3C	; 60
  56:	82 bb       	out	0x12, r24	; 18
  58:	f5 cf       	rjmp	.-22     	; 0x44 <__SREG__+0x5>

0000005a <_exit>:
  5a:	f8 94       	cli

0000005c <__stop_program>:
  5c:	ff cf       	rjmp	.-2      	; 0x5c <__stop_program>
