
lesson_18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000075c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000075c  000007f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800076  00800076  00000806  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000664  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000556  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000374  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  000017e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000315  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023b  00000000  00000000  00001c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	6b c0       	rjmp	.+214    	; 0xea <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e5       	ldi	r30, 0x5C	; 92
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 38       	cpi	r26, 0x88	; 136
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d7 d1       	rcall	.+942    	; 0x408 <main>
  5a:	7e c3       	rjmp	.+1788   	; 0x758 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <chislo>:
     0b01101111  //9
 };


 void chislo (unsigned int vse_chislo)
 {
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ac 01       	movw	r20, r24
     r1_100 = vse_chislo/100;    // сотни
  64:	ec 01       	movw	r28, r24
  66:	d6 95       	lsr	r29
  68:	c7 95       	ror	r28
  6a:	d6 95       	lsr	r29
  6c:	c7 95       	ror	r28
  6e:	9e 01       	movw	r18, r28
  70:	ab e7       	ldi	r26, 0x7B	; 123
  72:	b4 e1       	ldi	r27, 0x14	; 20
  74:	43 d3       	rcall	.+1670   	; 0x6fc <__umulhisi3>
  76:	fc 01       	movw	r30, r24
  78:	f6 95       	lsr	r31
  7a:	e7 95       	ror	r30
  7c:	f0 93 87 00 	sts	0x0087, r31	; 0x800087 <r1_100+0x1>
  80:	e0 93 86 00 	sts	0x0086, r30	; 0x800086 <r1_100>
     r2_10  = vse_chislo%100/10; // десятки
  84:	24 e6       	ldi	r18, 0x64	; 100
  86:	2e 9f       	mul	r18, r30
  88:	c0 01       	movw	r24, r0
  8a:	2f 9f       	mul	r18, r31
  8c:	90 0d       	add	r25, r0
  8e:	11 24       	eor	r1, r1
  90:	9a 01       	movw	r18, r20
  92:	28 1b       	sub	r18, r24
  94:	39 0b       	sbc	r19, r25
  96:	ad ec       	ldi	r26, 0xCD	; 205
  98:	bc ec       	ldi	r27, 0xCC	; 204
  9a:	30 d3       	rcall	.+1632   	; 0x6fc <__umulhisi3>
  9c:	96 95       	lsr	r25
  9e:	87 95       	ror	r24
  a0:	96 95       	lsr	r25
  a2:	87 95       	ror	r24
  a4:	96 95       	lsr	r25
  a6:	87 95       	ror	r24
  a8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <r2_10+0x1>
  ac:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <r2_10>
     r3_1   = vse_chislo%10;		// единицы
  b0:	9a 01       	movw	r18, r20
  b2:	24 d3       	rcall	.+1608   	; 0x6fc <__umulhisi3>
  b4:	96 95       	lsr	r25
  b6:	87 95       	ror	r24
  b8:	96 95       	lsr	r25
  ba:	87 95       	ror	r24
  bc:	96 95       	lsr	r25
  be:	87 95       	ror	r24
  c0:	9c 01       	movw	r18, r24
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	82 0f       	add	r24, r18
  d4:	93 1f       	adc	r25, r19
  d6:	9a 01       	movw	r18, r20
  d8:	28 1b       	sub	r18, r24
  da:	39 0b       	sbc	r19, r25
  dc:	30 93 83 00 	sts	0x0083, r19	; 0x800083 <r3_1+0x1>
  e0:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <r3_1>
 }
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <__vector_9>:

 ISR(TIMER0_OVF_vect) {
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
    TCNT0 = 127;
 10c:	8f e7       	ldi	r24, 0x7F	; 127
 10e:	82 bf       	out	0x32, r24	; 50
  
    if (++z > 3 ) z = 1;
 110:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <z>
 114:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <z+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <z+0x1>
 11e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <z>
 122:	04 97       	sbiw	r24, 0x04	; 4
 124:	34 f0       	brlt	.+12     	; 0x132 <__vector_9+0x48>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <z+0x1>
 12e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <z>
  
    if (z == 1) {
 132:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <z>
 136:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <z+0x1>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	91 05       	cpc	r25, r1
 13e:	39 f5       	brne	.+78     	; 0x18e <__vector_9+0xa4>
        PORTB |= (1<<2) | (1<<1);	// Выключаем 2 и 3 разряды
 140:	88 b3       	in	r24, 0x18	; 24
 142:	86 60       	ori	r24, 0x06	; 6
 144:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<0);			// ВКлючаем 1 разряд
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r1_100];// Сотни
 14c:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <r1_100>
 150:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <r1_100+0x1>
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 5a       	subi	r30, 0xA0	; 160
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	82 bb       	out	0x12, r24	; 18
        if (voltage < 10) {
 160:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <voltage>
 164:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <voltage+0x1>
 168:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <voltage+0x2>
 16c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <voltage+0x3>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e2       	ldi	r20, 0x20	; 32
 176:	51 e4       	ldi	r21, 0x41	; 65
 178:	5c d1       	rcall	.+696    	; 0x432 <__cmpsf2>
 17a:	88 23       	and	r24, r24
 17c:	24 f4       	brge	.+8      	; 0x186 <__vector_9+0x9c>
            SEG7_PORT |= (1<<7);
 17e:	82 b3       	in	r24, 0x12	; 18
 180:	80 68       	ori	r24, 0x80	; 128
 182:	82 bb       	out	0x12, r24	; 18
 184:	40 c0       	rjmp	.+128    	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
        } else {
            SEG7_PORT &= ~(1<<7);
 186:	82 b3       	in	r24, 0x12	; 18
 188:	8f 77       	andi	r24, 0x7F	; 127
 18a:	82 bb       	out	0x12, r24	; 18
 18c:	3c c0       	rjmp	.+120    	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
        }
    } else if (z == 2) {
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	91 05       	cpc	r25, r1
 192:	39 f5       	brne	.+78     	; 0x1e2 <__vector_9+0xf8>
        PORTB |= (1<<2) | (1<<0);	// Выключаем 1 и 3 разряды
 194:	88 b3       	in	r24, 0x18	; 24
 196:	85 60       	ori	r24, 0x05	; 5
 198:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<1);			// ВКлючаем 2 разряд
 19a:	88 b3       	in	r24, 0x18	; 24
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r2_10];	// Десятки
 1a0:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <r2_10>
 1a4:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <r2_10+0x1>
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	e0 5a       	subi	r30, 0xA0	; 160
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	80 81       	ld	r24, Z
 1b2:	82 bb       	out	0x12, r24	; 18
        if (voltage >= 10) {
 1b4:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <voltage>
 1b8:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <voltage+0x1>
 1bc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <voltage+0x2>
 1c0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <voltage+0x3>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e2       	ldi	r20, 0x20	; 32
 1ca:	51 e4       	ldi	r21, 0x41	; 65
 1cc:	ec d1       	rcall	.+984    	; 0x5a6 <__gesf2>
 1ce:	88 23       	and	r24, r24
 1d0:	24 f0       	brlt	.+8      	; 0x1da <__vector_9+0xf0>
            SEG7_PORT |= (1<<7);
 1d2:	82 b3       	in	r24, 0x12	; 18
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	82 bb       	out	0x12, r24	; 18
 1d8:	16 c0       	rjmp	.+44     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
        } else {
            SEG7_PORT &= ~(1<<7);
 1da:	82 b3       	in	r24, 0x12	; 18
 1dc:	8f 77       	andi	r24, 0x7F	; 127
 1de:	82 bb       	out	0x12, r24	; 18
 1e0:	12 c0       	rjmp	.+36     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
        }
    } else if (z == 3) {
 1e2:	03 97       	sbiw	r24, 0x03	; 3
 1e4:	81 f4       	brne	.+32     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
        PORTB |= (1<<1) | (1<<0);	// Выключаем 1 и 2 разряды
 1e6:	88 b3       	in	r24, 0x18	; 24
 1e8:	83 60       	ori	r24, 0x03	; 3
 1ea:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<2);			// ВКлючаем 3 разряд
 1ec:	88 b3       	in	r24, 0x18	; 24
 1ee:	8b 7f       	andi	r24, 0xFB	; 251
 1f0:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits [r3_1];	// Единицы
 1f2:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <r3_1>
 1f6:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <r3_1+0x1>
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	e0 5a       	subi	r30, 0xA0	; 160
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	80 81       	ld	r24, Z
 204:	82 bb       	out	0x12, r24	; 18
    }

 }
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_14>:

ISR(ADC_vect) {
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
    
    ADC_10 += ADC;
 256:	84 b1       	in	r24, 0x04	; 4
 258:	95 b1       	in	r25, 0x05	; 5
 25a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <ADC_10>
 25e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <ADC_10+0x1>
 262:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <ADC_10+0x2>
 266:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <ADC_10+0x3>
 26a:	8a 01       	movw	r16, r20
 26c:	9b 01       	movw	r18, r22
 26e:	08 0f       	add	r16, r24
 270:	19 1f       	adc	r17, r25
 272:	21 1d       	adc	r18, r1
 274:	31 1d       	adc	r19, r1
 276:	c9 01       	movw	r24, r18
 278:	b8 01       	movw	r22, r16
 27a:	00 93 78 00 	sts	0x0078, r16	; 0x800078 <ADC_10>
 27e:	10 93 79 00 	sts	0x0079, r17	; 0x800079 <ADC_10+0x1>
 282:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <ADC_10+0x2>
 286:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <ADC_10+0x3>
    zbl++;
 28a:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__data_end>
 28e:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <__data_end+0x1>
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <__data_end+0x1>
 29a:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <__data_end>
    if (zbl >= 10) {
 29e:	2a 30       	cpi	r18, 0x0A	; 10
 2a0:	31 05       	cpc	r19, r1
 2a2:	0c f4       	brge	.+2      	; 0x2a6 <__vector_14+0x7e>
 2a4:	75 c0       	rjmp	.+234    	; 0x390 <__vector_14+0x168>
        voltage = ADC_10/10*VREF/1024.*COEF_DIV;
 2a6:	2a e0       	ldi	r18, 0x0A	; 10
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	0a d2       	rcall	.+1044   	; 0x6c4 <__divmodsi4>
 2b0:	da 01       	movw	r26, r20
 2b2:	c9 01       	movw	r24, r18
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	aa 1f       	adc	r26, r26
 2ba:	bb 1f       	adc	r27, r27
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	aa 1f       	adc	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	bc 01       	movw	r22, r24
 2c6:	cd 01       	movw	r24, r26
 2c8:	62 0f       	add	r22, r18
 2ca:	73 1f       	adc	r23, r19
 2cc:	84 1f       	adc	r24, r20
 2ce:	95 1f       	adc	r25, r21
 2d0:	e2 d0       	rcall	.+452    	; 0x496 <__floatsisf>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	40 e8       	ldi	r20, 0x80	; 128
 2d8:	5a e3       	ldi	r21, 0x3A	; 58
 2da:	69 d1       	rcall	.+722    	; 0x5ae <__mulsf3>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e2       	ldi	r20, 0x20	; 32
 2e2:	51 e4       	ldi	r21, 0x41	; 65
 2e4:	64 d1       	rcall	.+712    	; 0x5ae <__mulsf3>
 2e6:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <voltage>
 2ea:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <voltage+0x1>
 2ee:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <voltage+0x2>
 2f2:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <voltage+0x3>

        if (voltage > 45) {
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	44 e3       	ldi	r20, 0x34	; 52
 2fc:	52 e4       	ldi	r21, 0x42	; 66
 2fe:	53 d1       	rcall	.+678    	; 0x5a6 <__gesf2>
 300:	18 16       	cp	r1, r24
 302:	1c f4       	brge	.+6      	; 0x30a <__vector_14+0xe2>
            PORTB &= ~(1<<7);
 304:	88 b3       	in	r24, 0x18	; 24
 306:	8f 77       	andi	r24, 0x7F	; 127
 308:	88 bb       	out	0x18, r24	; 24
        }
        if (voltage < 40) {
 30a:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <voltage>
 30e:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <voltage+0x1>
 312:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <voltage+0x2>
 316:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <voltage+0x3>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e2       	ldi	r20, 0x20	; 32
 320:	52 e4       	ldi	r21, 0x42	; 66
 322:	87 d0       	rcall	.+270    	; 0x432 <__cmpsf2>
 324:	88 23       	and	r24, r24
 326:	1c f4       	brge	.+6      	; 0x32e <__vector_14+0x106>
            PORTB |= (1<<7);
 328:	88 b3       	in	r24, 0x18	; 24
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	88 bb       	out	0x18, r24	; 24
        }
        
        volty = (voltage < 10) ? 100 : 10;
 32e:	c0 90 7c 00 	lds	r12, 0x007C	; 0x80007c <voltage>
 332:	d0 90 7d 00 	lds	r13, 0x007D	; 0x80007d <voltage+0x1>
 336:	e0 90 7e 00 	lds	r14, 0x007E	; 0x80007e <voltage+0x2>
 33a:	f0 90 7f 00 	lds	r15, 0x007F	; 0x80007f <voltage+0x3>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 e2       	ldi	r20, 0x20	; 32
 344:	51 e4       	ldi	r21, 0x41	; 65
 346:	c7 01       	movw	r24, r14
 348:	b6 01       	movw	r22, r12
 34a:	73 d0       	rcall	.+230    	; 0x432 <__cmpsf2>
 34c:	88 23       	and	r24, r24
 34e:	1c f4       	brge	.+6      	; 0x356 <__vector_14+0x12e>
 350:	64 e6       	ldi	r22, 0x64	; 100
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <__vector_14+0x132>
 356:	6a e0       	ldi	r22, 0x0A	; 10
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <volty+0x1>
 35e:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <volty>

        chislo(voltage * volty);
 362:	07 2e       	mov	r0, r23
 364:	00 0c       	add	r0, r0
 366:	88 0b       	sbc	r24, r24
 368:	99 0b       	sbc	r25, r25
 36a:	95 d0       	rcall	.+298    	; 0x496 <__floatsisf>
 36c:	a7 01       	movw	r20, r14
 36e:	96 01       	movw	r18, r12
 370:	1e d1       	rcall	.+572    	; 0x5ae <__mulsf3>
 372:	63 d0       	rcall	.+198    	; 0x43a <__fixunssfsi>
 374:	cb 01       	movw	r24, r22
 376:	73 de       	rcall	.-794    	; 0x5e <chislo>

        zbl = 0;
 378:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__data_end+0x1>
 37c:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
        ADC_10 = 0;
 380:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <ADC_10>
 384:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <ADC_10+0x1>
 388:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <ADC_10+0x2>
 38c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <ADC_10+0x3>
    }

    ADCSRA |= (1<<ADSC); // Запуск преобразование АЦП
 390:	86 b1       	in	r24, 0x06	; 6
 392:	80 64       	ori	r24, 0x40	; 64
 394:	86 b9       	out	0x06, r24	; 6
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <ADC_settings>:

 void ADC_settings() {
     //настройка adc
     ADCSRA |= (1<<ADEN); // Включаем адс
 3c4:	86 b1       	in	r24, 0x06	; 6
 3c6:	80 68       	ori	r24, 0x80	; 128
 3c8:	86 b9       	out	0x06, r24	; 6
     ADCSRA &= ~(1<<ADFR); // Включаем режим непрерывного измерения
 3ca:	86 b1       	in	r24, 0x06	; 6
 3cc:	8f 7d       	andi	r24, 0xDF	; 223
 3ce:	86 b9       	out	0x06, r24	; 6
     // частота дискретизации 125кГц при Fmk = 1мГц и коэф.деления = 8
     ADCSRA &= ~(1<<ADPS2);
 3d0:	86 b1       	in	r24, 0x06	; 6
 3d2:	8b 7f       	andi	r24, 0xFB	; 251
 3d4:	86 b9       	out	0x06, r24	; 6
     ADCSRA |= (1<<ADPS1) | ((1<<ADPS0));
 3d6:	86 b1       	in	r24, 0x06	; 6
 3d8:	83 60       	ori	r24, 0x03	; 3
 3da:	86 b9       	out	0x06, r24	; 6
 
     ADMUX |= (1<<REFS0); // источник опорного напряжения 2.56В
 3dc:	87 b1       	in	r24, 0x07	; 7
 3de:	80 64       	ori	r24, 0x40	; 64
 3e0:	87 b9       	out	0x07, r24	; 7
     ADMUX &= ~(1<<REFS1);
 3e2:	87 b1       	in	r24, 0x07	; 7
 3e4:	8f 77       	andi	r24, 0x7F	; 127
 3e6:	87 b9       	out	0x07, r24	; 7
     ADMUX &= ~(1<<ADLAR); // сдвинули 10 бит вправо в реигстре чтения измерения
 3e8:	87 b1       	in	r24, 0x07	; 7
 3ea:	8f 7d       	andi	r24, 0xDF	; 223
 3ec:	87 b9       	out	0x07, r24	; 7

     ADMUX &= ~((1<<3) | (1<<2));
 3ee:	87 b1       	in	r24, 0x07	; 7
 3f0:	83 7f       	andi	r24, 0xF3	; 243
 3f2:	87 b9       	out	0x07, r24	; 7
     ADMUX |= (1<<1) | (1<<0);
 3f4:	87 b1       	in	r24, 0x07	; 7
 3f6:	83 60       	ori	r24, 0x03	; 3
 3f8:	87 b9       	out	0x07, r24	; 7

     ADCSRA |= (1<<ADIE); // разрешает прерывание АЦП
 3fa:	86 b1       	in	r24, 0x06	; 6
 3fc:	88 60       	ori	r24, 0x08	; 8
 3fe:	86 b9       	out	0x06, r24	; 6

     ADCSRA |= (1<<ADSC); // Запуск преобразование АЦП
 400:	86 b1       	in	r24, 0x06	; 6
 402:	80 64       	ori	r24, 0x40	; 64
 404:	86 b9       	out	0x06, r24	; 6
 406:	08 95       	ret

00000408 <main>:
 }

 int main(void)
 {
 
    ADC_settings();
 408:	dd df       	rcall	.-70     	; 0x3c4 <ADC_settings>
    
    SEG7_DDR = 0xff;
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	81 bb       	out	0x11, r24	; 17
    SEG7_PORT = 0x00;
 40e:	12 ba       	out	0x12, r1	; 18
     
    DDRB |= (1<<2) | (1<<1) | (1<<0);
 410:	87 b3       	in	r24, 0x17	; 23
 412:	87 60       	ori	r24, 0x07	; 7
 414:	87 bb       	out	0x17, r24	; 23
    PORTB |= (1<<2) | (1<<1) | (1<<0);
 416:	88 b3       	in	r24, 0x18	; 24
 418:	87 60       	ori	r24, 0x07	; 7
 41a:	88 bb       	out	0x18, r24	; 24

    DDRB |= (1<<7);
 41c:	87 b3       	in	r24, 0x17	; 23
 41e:	80 68       	ori	r24, 0x80	; 128
 420:	87 bb       	out	0x17, r24	; 23

    TCCR0 = 0b00000010; // делитель на 8
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0;
 426:	12 be       	out	0x32, r1	; 50

    TIMSK |= (1<<TOIE0);
 428:	89 b7       	in	r24, 0x39	; 57
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	89 bf       	out	0x39, r24	; 57

    sei();
 42e:	78 94       	sei
 430:	ff cf       	rjmp	.-2      	; 0x430 <main+0x28>

00000432 <__cmpsf2>:
 432:	6c d0       	rcall	.+216    	; 0x50c <__fp_cmp>
 434:	08 f4       	brcc	.+2      	; 0x438 <__cmpsf2+0x6>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	08 95       	ret

0000043a <__fixunssfsi>:
 43a:	94 d0       	rcall	.+296    	; 0x564 <__fp_splitA>
 43c:	88 f0       	brcs	.+34     	; 0x460 <__stack+0x1>
 43e:	9f 57       	subi	r25, 0x7F	; 127
 440:	90 f0       	brcs	.+36     	; 0x466 <__stack+0x7>
 442:	b9 2f       	mov	r27, r25
 444:	99 27       	eor	r25, r25
 446:	b7 51       	subi	r27, 0x17	; 23
 448:	a0 f0       	brcs	.+40     	; 0x472 <__stack+0x13>
 44a:	d1 f0       	breq	.+52     	; 0x480 <__stack+0x21>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	1a f0       	brmi	.+6      	; 0x45c <__fixunssfsi+0x22>
 456:	ba 95       	dec	r27
 458:	c9 f7       	brne	.-14     	; 0x44c <__fixunssfsi+0x12>
 45a:	12 c0       	rjmp	.+36     	; 0x480 <__stack+0x21>
 45c:	b1 30       	cpi	r27, 0x01	; 1
 45e:	81 f0       	breq	.+32     	; 0x480 <__stack+0x21>
 460:	9b d0       	rcall	.+310    	; 0x598 <__fp_zero>
 462:	b1 e0       	ldi	r27, 0x01	; 1
 464:	08 95       	ret
 466:	98 c0       	rjmp	.+304    	; 0x598 <__fp_zero>
 468:	67 2f       	mov	r22, r23
 46a:	78 2f       	mov	r23, r24
 46c:	88 27       	eor	r24, r24
 46e:	b8 5f       	subi	r27, 0xF8	; 248
 470:	39 f0       	breq	.+14     	; 0x480 <__stack+0x21>
 472:	b9 3f       	cpi	r27, 0xF9	; 249
 474:	cc f3       	brlt	.-14     	; 0x468 <__stack+0x9>
 476:	86 95       	lsr	r24
 478:	77 95       	ror	r23
 47a:	67 95       	ror	r22
 47c:	b3 95       	inc	r27
 47e:	d9 f7       	brne	.-10     	; 0x476 <__stack+0x17>
 480:	3e f4       	brtc	.+14     	; 0x490 <__stack+0x31>
 482:	90 95       	com	r25
 484:	80 95       	com	r24
 486:	70 95       	com	r23
 488:	61 95       	neg	r22
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__floatunsisf>:
 492:	e8 94       	clt
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <__floatsisf+0x12>

00000496 <__floatsisf>:
 496:	97 fb       	bst	r25, 7
 498:	3e f4       	brtc	.+14     	; 0x4a8 <__floatsisf+0x12>
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	99 23       	and	r25, r25
 4aa:	a9 f0       	breq	.+42     	; 0x4d6 <__floatsisf+0x40>
 4ac:	f9 2f       	mov	r31, r25
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	bb 27       	eor	r27, r27
 4b2:	93 95       	inc	r25
 4b4:	f6 95       	lsr	r31
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f1 11       	cpse	r31, r1
 4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <__floatsisf+0x1c>
 4c2:	fa f4       	brpl	.+62     	; 0x502 <__floatsisf+0x6c>
 4c4:	bb 0f       	add	r27, r27
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__floatsisf+0x36>
 4c8:	60 ff       	sbrs	r22, 0
 4ca:	1b c0       	rjmp	.+54     	; 0x502 <__floatsisf+0x6c>
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	8f 4f       	sbci	r24, 0xFF	; 255
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	16 c0       	rjmp	.+44     	; 0x502 <__floatsisf+0x6c>
 4d6:	88 23       	and	r24, r24
 4d8:	11 f0       	breq	.+4      	; 0x4de <__floatsisf+0x48>
 4da:	96 e9       	ldi	r25, 0x96	; 150
 4dc:	11 c0       	rjmp	.+34     	; 0x500 <__floatsisf+0x6a>
 4de:	77 23       	and	r23, r23
 4e0:	21 f0       	breq	.+8      	; 0x4ea <__floatsisf+0x54>
 4e2:	9e e8       	ldi	r25, 0x8E	; 142
 4e4:	87 2f       	mov	r24, r23
 4e6:	76 2f       	mov	r23, r22
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <__floatsisf+0x5e>
 4ea:	66 23       	and	r22, r22
 4ec:	71 f0       	breq	.+28     	; 0x50a <__floatsisf+0x74>
 4ee:	96 e8       	ldi	r25, 0x86	; 134
 4f0:	86 2f       	mov	r24, r22
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	2a f0       	brmi	.+10     	; 0x502 <__floatsisf+0x6c>
 4f8:	9a 95       	dec	r25
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	da f7       	brpl	.-10     	; 0x4f8 <__floatsisf+0x62>
 502:	88 0f       	add	r24, r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	97 f9       	bld	r25, 7
 50a:	08 95       	ret

0000050c <__fp_cmp>:
 50c:	99 0f       	add	r25, r25
 50e:	00 08       	sbc	r0, r0
 510:	55 0f       	add	r21, r21
 512:	aa 0b       	sbc	r26, r26
 514:	e0 e8       	ldi	r30, 0x80	; 128
 516:	fe ef       	ldi	r31, 0xFE	; 254
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	e8 07       	cpc	r30, r24
 51e:	f9 07       	cpc	r31, r25
 520:	c0 f0       	brcs	.+48     	; 0x552 <__fp_cmp+0x46>
 522:	12 16       	cp	r1, r18
 524:	13 06       	cpc	r1, r19
 526:	e4 07       	cpc	r30, r20
 528:	f5 07       	cpc	r31, r21
 52a:	98 f0       	brcs	.+38     	; 0x552 <__fp_cmp+0x46>
 52c:	62 1b       	sub	r22, r18
 52e:	73 0b       	sbc	r23, r19
 530:	84 0b       	sbc	r24, r20
 532:	95 0b       	sbc	r25, r21
 534:	39 f4       	brne	.+14     	; 0x544 <__fp_cmp+0x38>
 536:	0a 26       	eor	r0, r26
 538:	61 f0       	breq	.+24     	; 0x552 <__fp_cmp+0x46>
 53a:	23 2b       	or	r18, r19
 53c:	24 2b       	or	r18, r20
 53e:	25 2b       	or	r18, r21
 540:	21 f4       	brne	.+8      	; 0x54a <__fp_cmp+0x3e>
 542:	08 95       	ret
 544:	0a 26       	eor	r0, r26
 546:	09 f4       	brne	.+2      	; 0x54a <__fp_cmp+0x3e>
 548:	a1 40       	sbci	r26, 0x01	; 1
 54a:	a6 95       	lsr	r26
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	81 1d       	adc	r24, r1
 550:	81 1d       	adc	r24, r1
 552:	08 95       	ret

00000554 <__fp_split3>:
 554:	57 fd       	sbrc	r21, 7
 556:	90 58       	subi	r25, 0x80	; 128
 558:	44 0f       	add	r20, r20
 55a:	55 1f       	adc	r21, r21
 55c:	59 f0       	breq	.+22     	; 0x574 <__fp_splitA+0x10>
 55e:	5f 3f       	cpi	r21, 0xFF	; 255
 560:	71 f0       	breq	.+28     	; 0x57e <__fp_splitA+0x1a>
 562:	47 95       	ror	r20

00000564 <__fp_splitA>:
 564:	88 0f       	add	r24, r24
 566:	97 fb       	bst	r25, 7
 568:	99 1f       	adc	r25, r25
 56a:	61 f0       	breq	.+24     	; 0x584 <__fp_splitA+0x20>
 56c:	9f 3f       	cpi	r25, 0xFF	; 255
 56e:	79 f0       	breq	.+30     	; 0x58e <__fp_splitA+0x2a>
 570:	87 95       	ror	r24
 572:	08 95       	ret
 574:	12 16       	cp	r1, r18
 576:	13 06       	cpc	r1, r19
 578:	14 06       	cpc	r1, r20
 57a:	55 1f       	adc	r21, r21
 57c:	f2 cf       	rjmp	.-28     	; 0x562 <__fp_split3+0xe>
 57e:	46 95       	lsr	r20
 580:	f1 df       	rcall	.-30     	; 0x564 <__fp_splitA>
 582:	08 c0       	rjmp	.+16     	; 0x594 <__fp_splitA+0x30>
 584:	16 16       	cp	r1, r22
 586:	17 06       	cpc	r1, r23
 588:	18 06       	cpc	r1, r24
 58a:	99 1f       	adc	r25, r25
 58c:	f1 cf       	rjmp	.-30     	; 0x570 <__fp_splitA+0xc>
 58e:	86 95       	lsr	r24
 590:	71 05       	cpc	r23, r1
 592:	61 05       	cpc	r22, r1
 594:	08 94       	sec
 596:	08 95       	ret

00000598 <__fp_zero>:
 598:	e8 94       	clt

0000059a <__fp_szero>:
 59a:	bb 27       	eor	r27, r27
 59c:	66 27       	eor	r22, r22
 59e:	77 27       	eor	r23, r23
 5a0:	cb 01       	movw	r24, r22
 5a2:	97 f9       	bld	r25, 7
 5a4:	08 95       	ret

000005a6 <__gesf2>:
 5a6:	b2 df       	rcall	.-156    	; 0x50c <__fp_cmp>
 5a8:	08 f4       	brcc	.+2      	; 0x5ac <__gesf2+0x6>
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	08 95       	ret

000005ae <__mulsf3>:
 5ae:	0b d0       	rcall	.+22     	; 0x5c6 <__mulsf3x>
 5b0:	78 c0       	rjmp	.+240    	; 0x6a2 <__fp_round>
 5b2:	69 d0       	rcall	.+210    	; 0x686 <__fp_pscA>
 5b4:	28 f0       	brcs	.+10     	; 0x5c0 <__mulsf3+0x12>
 5b6:	6e d0       	rcall	.+220    	; 0x694 <__fp_pscB>
 5b8:	18 f0       	brcs	.+6      	; 0x5c0 <__mulsf3+0x12>
 5ba:	95 23       	and	r25, r21
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <__mulsf3+0x12>
 5be:	5a c0       	rjmp	.+180    	; 0x674 <__fp_inf>
 5c0:	5f c0       	rjmp	.+190    	; 0x680 <__fp_nan>
 5c2:	11 24       	eor	r1, r1
 5c4:	ea cf       	rjmp	.-44     	; 0x59a <__fp_szero>

000005c6 <__mulsf3x>:
 5c6:	c6 df       	rcall	.-116    	; 0x554 <__fp_split3>
 5c8:	a0 f3       	brcs	.-24     	; 0x5b2 <__mulsf3+0x4>

000005ca <__mulsf3_pse>:
 5ca:	95 9f       	mul	r25, r21
 5cc:	d1 f3       	breq	.-12     	; 0x5c2 <__mulsf3+0x14>
 5ce:	95 0f       	add	r25, r21
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	55 1f       	adc	r21, r21
 5d4:	62 9f       	mul	r22, r18
 5d6:	f0 01       	movw	r30, r0
 5d8:	72 9f       	mul	r23, r18
 5da:	bb 27       	eor	r27, r27
 5dc:	f0 0d       	add	r31, r0
 5de:	b1 1d       	adc	r27, r1
 5e0:	63 9f       	mul	r22, r19
 5e2:	aa 27       	eor	r26, r26
 5e4:	f0 0d       	add	r31, r0
 5e6:	b1 1d       	adc	r27, r1
 5e8:	aa 1f       	adc	r26, r26
 5ea:	64 9f       	mul	r22, r20
 5ec:	66 27       	eor	r22, r22
 5ee:	b0 0d       	add	r27, r0
 5f0:	a1 1d       	adc	r26, r1
 5f2:	66 1f       	adc	r22, r22
 5f4:	82 9f       	mul	r24, r18
 5f6:	22 27       	eor	r18, r18
 5f8:	b0 0d       	add	r27, r0
 5fa:	a1 1d       	adc	r26, r1
 5fc:	62 1f       	adc	r22, r18
 5fe:	73 9f       	mul	r23, r19
 600:	b0 0d       	add	r27, r0
 602:	a1 1d       	adc	r26, r1
 604:	62 1f       	adc	r22, r18
 606:	83 9f       	mul	r24, r19
 608:	a0 0d       	add	r26, r0
 60a:	61 1d       	adc	r22, r1
 60c:	22 1f       	adc	r18, r18
 60e:	74 9f       	mul	r23, r20
 610:	33 27       	eor	r19, r19
 612:	a0 0d       	add	r26, r0
 614:	61 1d       	adc	r22, r1
 616:	23 1f       	adc	r18, r19
 618:	84 9f       	mul	r24, r20
 61a:	60 0d       	add	r22, r0
 61c:	21 1d       	adc	r18, r1
 61e:	82 2f       	mov	r24, r18
 620:	76 2f       	mov	r23, r22
 622:	6a 2f       	mov	r22, r26
 624:	11 24       	eor	r1, r1
 626:	9f 57       	subi	r25, 0x7F	; 127
 628:	50 40       	sbci	r21, 0x00	; 0
 62a:	8a f0       	brmi	.+34     	; 0x64e <__mulsf3_pse+0x84>
 62c:	e1 f0       	breq	.+56     	; 0x666 <__mulsf3_pse+0x9c>
 62e:	88 23       	and	r24, r24
 630:	4a f0       	brmi	.+18     	; 0x644 <__mulsf3_pse+0x7a>
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	bb 1f       	adc	r27, r27
 638:	66 1f       	adc	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	91 50       	subi	r25, 0x01	; 1
 640:	50 40       	sbci	r21, 0x00	; 0
 642:	a9 f7       	brne	.-22     	; 0x62e <__mulsf3_pse+0x64>
 644:	9e 3f       	cpi	r25, 0xFE	; 254
 646:	51 05       	cpc	r21, r1
 648:	70 f0       	brcs	.+28     	; 0x666 <__mulsf3_pse+0x9c>
 64a:	14 c0       	rjmp	.+40     	; 0x674 <__fp_inf>
 64c:	a6 cf       	rjmp	.-180    	; 0x59a <__fp_szero>
 64e:	5f 3f       	cpi	r21, 0xFF	; 255
 650:	ec f3       	brlt	.-6      	; 0x64c <__mulsf3_pse+0x82>
 652:	98 3e       	cpi	r25, 0xE8	; 232
 654:	dc f3       	brlt	.-10     	; 0x64c <__mulsf3_pse+0x82>
 656:	86 95       	lsr	r24
 658:	77 95       	ror	r23
 65a:	67 95       	ror	r22
 65c:	b7 95       	ror	r27
 65e:	f7 95       	ror	r31
 660:	e7 95       	ror	r30
 662:	9f 5f       	subi	r25, 0xFF	; 255
 664:	c1 f7       	brne	.-16     	; 0x656 <__mulsf3_pse+0x8c>
 666:	fe 2b       	or	r31, r30
 668:	88 0f       	add	r24, r24
 66a:	91 1d       	adc	r25, r1
 66c:	96 95       	lsr	r25
 66e:	87 95       	ror	r24
 670:	97 f9       	bld	r25, 7
 672:	08 95       	ret

00000674 <__fp_inf>:
 674:	97 f9       	bld	r25, 7
 676:	9f 67       	ori	r25, 0x7F	; 127
 678:	80 e8       	ldi	r24, 0x80	; 128
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	08 95       	ret

00000680 <__fp_nan>:
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	80 ec       	ldi	r24, 0xC0	; 192
 684:	08 95       	ret

00000686 <__fp_pscA>:
 686:	00 24       	eor	r0, r0
 688:	0a 94       	dec	r0
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	09 06       	cpc	r0, r25
 692:	08 95       	ret

00000694 <__fp_pscB>:
 694:	00 24       	eor	r0, r0
 696:	0a 94       	dec	r0
 698:	12 16       	cp	r1, r18
 69a:	13 06       	cpc	r1, r19
 69c:	14 06       	cpc	r1, r20
 69e:	05 06       	cpc	r0, r21
 6a0:	08 95       	ret

000006a2 <__fp_round>:
 6a2:	09 2e       	mov	r0, r25
 6a4:	03 94       	inc	r0
 6a6:	00 0c       	add	r0, r0
 6a8:	11 f4       	brne	.+4      	; 0x6ae <__fp_round+0xc>
 6aa:	88 23       	and	r24, r24
 6ac:	52 f0       	brmi	.+20     	; 0x6c2 <__fp_round+0x20>
 6ae:	bb 0f       	add	r27, r27
 6b0:	40 f4       	brcc	.+16     	; 0x6c2 <__fp_round+0x20>
 6b2:	bf 2b       	or	r27, r31
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__fp_round+0x18>
 6b6:	60 ff       	sbrs	r22, 0
 6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <__fp_round+0x20>
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	08 95       	ret

000006c4 <__divmodsi4>:
 6c4:	05 2e       	mov	r0, r21
 6c6:	97 fb       	bst	r25, 7
 6c8:	16 f4       	brtc	.+4      	; 0x6ce <__divmodsi4+0xa>
 6ca:	00 94       	com	r0
 6cc:	0f d0       	rcall	.+30     	; 0x6ec <__negsi2>
 6ce:	57 fd       	sbrc	r21, 7
 6d0:	05 d0       	rcall	.+10     	; 0x6dc <__divmodsi4_neg2>
 6d2:	20 d0       	rcall	.+64     	; 0x714 <__udivmodsi4>
 6d4:	07 fc       	sbrc	r0, 7
 6d6:	02 d0       	rcall	.+4      	; 0x6dc <__divmodsi4_neg2>
 6d8:	46 f4       	brtc	.+16     	; 0x6ea <__divmodsi4_exit>
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <__negsi2>

000006dc <__divmodsi4_neg2>:
 6dc:	50 95       	com	r21
 6de:	40 95       	com	r20
 6e0:	30 95       	com	r19
 6e2:	21 95       	neg	r18
 6e4:	3f 4f       	sbci	r19, 0xFF	; 255
 6e6:	4f 4f       	sbci	r20, 0xFF	; 255
 6e8:	5f 4f       	sbci	r21, 0xFF	; 255

000006ea <__divmodsi4_exit>:
 6ea:	08 95       	ret

000006ec <__negsi2>:
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	08 95       	ret

000006fc <__umulhisi3>:
 6fc:	a2 9f       	mul	r26, r18
 6fe:	b0 01       	movw	r22, r0
 700:	b3 9f       	mul	r27, r19
 702:	c0 01       	movw	r24, r0
 704:	a3 9f       	mul	r26, r19
 706:	01 d0       	rcall	.+2      	; 0x70a <__umulhisi3+0xe>
 708:	b2 9f       	mul	r27, r18
 70a:	70 0d       	add	r23, r0
 70c:	81 1d       	adc	r24, r1
 70e:	11 24       	eor	r1, r1
 710:	91 1d       	adc	r25, r1
 712:	08 95       	ret

00000714 <__udivmodsi4>:
 714:	a1 e2       	ldi	r26, 0x21	; 33
 716:	1a 2e       	mov	r1, r26
 718:	aa 1b       	sub	r26, r26
 71a:	bb 1b       	sub	r27, r27
 71c:	fd 01       	movw	r30, r26
 71e:	0d c0       	rjmp	.+26     	; 0x73a <__udivmodsi4_ep>

00000720 <__udivmodsi4_loop>:
 720:	aa 1f       	adc	r26, r26
 722:	bb 1f       	adc	r27, r27
 724:	ee 1f       	adc	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	a2 17       	cp	r26, r18
 72a:	b3 07       	cpc	r27, r19
 72c:	e4 07       	cpc	r30, r20
 72e:	f5 07       	cpc	r31, r21
 730:	20 f0       	brcs	.+8      	; 0x73a <__udivmodsi4_ep>
 732:	a2 1b       	sub	r26, r18
 734:	b3 0b       	sbc	r27, r19
 736:	e4 0b       	sbc	r30, r20
 738:	f5 0b       	sbc	r31, r21

0000073a <__udivmodsi4_ep>:
 73a:	66 1f       	adc	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	88 1f       	adc	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	1a 94       	dec	r1
 744:	69 f7       	brne	.-38     	; 0x720 <__udivmodsi4_loop>
 746:	60 95       	com	r22
 748:	70 95       	com	r23
 74a:	80 95       	com	r24
 74c:	90 95       	com	r25
 74e:	9b 01       	movw	r18, r22
 750:	ac 01       	movw	r20, r24
 752:	bd 01       	movw	r22, r26
 754:	cf 01       	movw	r24, r30
 756:	08 95       	ret

00000758 <_exit>:
 758:	f8 94       	cli

0000075a <__stop_program>:
 75a:	ff cf       	rjmp	.-2      	; 0x75a <__stop_program>
