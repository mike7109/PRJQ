
lesson_17_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051f  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  000006b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000217  00000000  00000000  00000b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b1  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	3d c0       	rjmp	.+122    	; 0xb0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


int main(void)
{
    
    DDRB |= (1<<1) | (1<<0);
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	83 60       	ori	r24, 0x03	; 3
  3c:	87 bb       	out	0x17, r24	; 23
    PORTB &= ~((1<<1) | (1<<0));
  3e:	88 b3       	in	r24, 0x18	; 24
  40:	8c 7f       	andi	r24, 0xFC	; 252
  42:	88 bb       	out	0x18, r24	; 24

    DDRC &= ~(1<<3); // 3ий канал ацп
  44:	84 b3       	in	r24, 0x14	; 20
  46:	87 7f       	andi	r24, 0xF7	; 247
  48:	84 bb       	out	0x14, r24	; 20

    //настройка adc
    ADCSRA |= (1<<ADEN); // Включаем адс
  4a:	86 b1       	in	r24, 0x06	; 6
  4c:	80 68       	ori	r24, 0x80	; 128
  4e:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= (1<<ADFR); // Включаем режим непрерывного измерения
  50:	86 b1       	in	r24, 0x06	; 6
  52:	80 62       	ori	r24, 0x20	; 32
  54:	86 b9       	out	0x06, r24	; 6
    // частота дискретизации 125кГц при Fmk = 1мГц и коэф.деления = 8
    ADCSRA &= ~(1<<ADPS2); 
  56:	86 b1       	in	r24, 0x06	; 6
  58:	8b 7f       	andi	r24, 0xFB	; 251
  5a:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= (1<<ADPS1) | ((1<<ADPS0));
  5c:	86 b1       	in	r24, 0x06	; 6
  5e:	83 60       	ori	r24, 0x03	; 3
  60:	86 b9       	out	0x06, r24	; 6
    
    ADMUX |= (1<<REFS1) | (1<<REFS0); // источник опорного напряжения 2.56В
  62:	87 b1       	in	r24, 0x07	; 7
  64:	80 6c       	ori	r24, 0xC0	; 192
  66:	87 b9       	out	0x07, r24	; 7
    ADMUX &= ~(1<<ADLAR); // сдвинули 10 бит вправо в реигстре чтения измерения
  68:	87 b1       	in	r24, 0x07	; 7
  6a:	8f 7d       	andi	r24, 0xDF	; 223
  6c:	87 b9       	out	0x07, r24	; 7

    ADMUX &= ~((1<<3) | (1<<2));
  6e:	87 b1       	in	r24, 0x07	; 7
  70:	83 7f       	andi	r24, 0xF3	; 243
  72:	87 b9       	out	0x07, r24	; 7
    ADMUX |= (1<<1) | (1<<0);
  74:	87 b1       	in	r24, 0x07	; 7
  76:	83 60       	ori	r24, 0x03	; 3
  78:	87 b9       	out	0x07, r24	; 7

    ADCSRA |= (1<<ADSC); // Запуск преобразование АЦП
  7a:	86 b1       	in	r24, 0x06	; 6
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	86 b9       	out	0x06, r24	; 6

    while (1) 
    {
        if (ADCSRA&(1<<ADIF))
  80:	34 9b       	sbis	0x06, 4	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <__SREG__+0x41>
        {
            if (ADC > 600)
  84:	84 b1       	in	r24, 0x04	; 4
  86:	95 b1       	in	r25, 0x05	; 5
  88:	89 35       	cpi	r24, 0x59	; 89
  8a:	92 40       	sbci	r25, 0x02	; 2
  8c:	38 f0       	brcs	.+14     	; 0x9c <__SREG__+0x5d>
            {
                PORTB |= (1<<0); //     green LED on
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	81 60       	ori	r24, 0x01	; 1
  92:	88 bb       	out	0x18, r24	; 24
                PORTB &= ~(1<<1); //    yellow LED off
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8d 7f       	andi	r24, 0xFD	; 253
  98:	88 bb       	out	0x18, r24	; 24
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <__SREG__+0x69>
            }
            else
            {
                PORTB &= ~(1<<0); //green LED off
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	88 bb       	out	0x18, r24	; 24
                PORTB |= (1<<1); //yellow LED on
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	88 bb       	out	0x18, r24	; 24
            }

            ADCSRA |= (1<<ADIF);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	86 b9       	out	0x06, r24	; 6
  ae:	e8 cf       	rjmp	.-48     	; 0x80 <__SREG__+0x41>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
