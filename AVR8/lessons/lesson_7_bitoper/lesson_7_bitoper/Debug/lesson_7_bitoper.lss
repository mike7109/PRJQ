
lesson_7_bitoper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800074  00800074  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000716  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000580  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030b  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000348  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e0  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e8       	ldi	r30, 0x8A	; 138
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 37       	cpi	r26, 0x7C	; 124
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	70 d0       	rcall	.+224    	; 0x13a <main>
  5a:	15 c1       	rjmp	.+554    	; 0x286 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <chicslo>:
    0b00000111, // 7
    0b01111111, // 8
    0b01101111, // 9
};

void chicslo(unsigned int vse_chislo) {
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ac 01       	movw	r20, r24
    r1_1000 = vse_chislo / 1000;
  64:	ec 01       	movw	r28, r24
  66:	d6 95       	lsr	r29
  68:	c7 95       	ror	r28
  6a:	d6 95       	lsr	r29
  6c:	c7 95       	ror	r28
  6e:	d6 95       	lsr	r29
  70:	c7 95       	ror	r28
  72:	9e 01       	movw	r18, r28
  74:	a5 ec       	ldi	r26, 0xC5	; 197
  76:	b0 e2       	ldi	r27, 0x20	; 32
  78:	fa d0       	rcall	.+500    	; 0x26e <__umulhisi3>
  7a:	fc 01       	movw	r30, r24
  7c:	f2 95       	swap	r31
  7e:	e2 95       	swap	r30
  80:	ef 70       	andi	r30, 0x0F	; 15
  82:	ef 27       	eor	r30, r31
  84:	ff 70       	andi	r31, 0x0F	; 15
  86:	ef 27       	eor	r30, r31
  88:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <r1_1000+0x1>
  8c:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <r1_1000>
    r2_100 = vse_chislo % 1000 / 100;
  90:	28 ee       	ldi	r18, 0xE8	; 232
  92:	33 e0       	ldi	r19, 0x03	; 3
  94:	e2 9f       	mul	r30, r18
  96:	c0 01       	movw	r24, r0
  98:	e3 9f       	mul	r30, r19
  9a:	90 0d       	add	r25, r0
  9c:	f2 9f       	mul	r31, r18
  9e:	90 0d       	add	r25, r0
  a0:	11 24       	eor	r1, r1
  a2:	9a 01       	movw	r18, r20
  a4:	28 1b       	sub	r18, r24
  a6:	39 0b       	sbc	r19, r25
  a8:	36 95       	lsr	r19
  aa:	27 95       	ror	r18
  ac:	36 95       	lsr	r19
  ae:	27 95       	ror	r18
  b0:	ab e7       	ldi	r26, 0x7B	; 123
  b2:	b4 e1       	ldi	r27, 0x14	; 20
  b4:	dc d0       	rcall	.+440    	; 0x26e <__umulhisi3>
  b6:	96 95       	lsr	r25
  b8:	87 95       	ror	r24
  ba:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <r2_100+0x1>
  be:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <r2_100>
    r3_10 = vse_chislo % 100 / 10;
  c2:	9a 01       	movw	r18, r20
  c4:	36 95       	lsr	r19
  c6:	27 95       	ror	r18
  c8:	36 95       	lsr	r19
  ca:	27 95       	ror	r18
  cc:	d0 d0       	rcall	.+416    	; 0x26e <__umulhisi3>
  ce:	9c 01       	movw	r18, r24
  d0:	36 95       	lsr	r19
  d2:	27 95       	ror	r18
  d4:	64 e6       	ldi	r22, 0x64	; 100
  d6:	62 9f       	mul	r22, r18
  d8:	c0 01       	movw	r24, r0
  da:	63 9f       	mul	r22, r19
  dc:	90 0d       	add	r25, r0
  de:	11 24       	eor	r1, r1
  e0:	9a 01       	movw	r18, r20
  e2:	28 1b       	sub	r18, r24
  e4:	39 0b       	sbc	r19, r25
  e6:	ad ec       	ldi	r26, 0xCD	; 205
  e8:	bc ec       	ldi	r27, 0xCC	; 204
  ea:	c1 d0       	rcall	.+386    	; 0x26e <__umulhisi3>
  ec:	96 95       	lsr	r25
  ee:	87 95       	ror	r24
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
  f8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <r3_10+0x1>
  fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <r3_10>
    r4_1 = vse_chislo %10;
 100:	9a 01       	movw	r18, r20
 102:	b5 d0       	rcall	.+362    	; 0x26e <__umulhisi3>
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	9c 01       	movw	r18, r24
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	9a 01       	movw	r18, r20
 128:	28 1b       	sub	r18, r24
 12a:	39 0b       	sbc	r19, r25
 12c:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <__data_end+0x1>
 130:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__data_end>
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <main>:

int main(void)
{
    SEG7_DDR = 0xff;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	81 bb       	out	0x11, r24	; 17
    SEG7_PORT = 0x00;
 13e:	12 ba       	out	0x12, r1	; 18

    DDRB |= (1<<3) | (1<<2) | (1<<1) | (1<<0);
 140:	87 b3       	in	r24, 0x17	; 23
 142:	8f 60       	ori	r24, 0x0F	; 15
 144:	87 bb       	out	0x17, r24	; 23
    PORTB |= (1<<3) | (1<<2) | (1<<1) | (1<<0);
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8f 60       	ori	r24, 0x0F	; 15
 14a:	88 bb       	out	0x18, r24	; 24

    DDRB &= ~(1<<7);
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	87 bb       	out	0x17, r24	; 23
    PORTB |= (1<<7);
 152:	88 b3       	in	r24, 0x18	; 24
 154:	80 68       	ori	r24, 0x80	; 128
 156:	88 bb       	out	0x18, r24	; 24

    unsigned int chislo_7seg = 0;
    unsigned int timer = 0;
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	10 e0       	ldi	r17, 0x00	; 0
    PORTB |= (1<<3) | (1<<2) | (1<<1) | (1<<0);

    DDRB &= ~(1<<7);
    PORTB |= (1<<7);

    unsigned int chislo_7seg = 0;
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned int timer = 0;
    while (1) 
    {
        
        if (~PINB & (1<<7)) {
 160:	b7 99       	sbic	0x16, 7	; 22
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0x2e>
            chislo_7seg = 0;
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
        }

        chicslo(chislo_7seg);
 168:	ce 01       	movw	r24, r28
 16a:	79 df       	rcall	.-270    	; 0x5e <chicslo>

        PORTB |= (1<<3) | (1<<2) | (1<<1); //выключаем 2 и 1 разряд
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	8e 60       	ori	r24, 0x0E	; 14
 170:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<0); // включаем 1 разряд
 172:	88 b3       	in	r24, 0x18	; 24
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits[r1_1000]; // сотни
 178:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <r1_1000>
 17c:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <r1_1000+0x1>
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e0 5a       	subi	r30, 0xA0	; 160
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
 18a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8d ee       	ldi	r24, 0xED	; 237
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x56>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x5c>
 196:	00 00       	nop

        _delay_ms(3);

        PORTB |= (1<<3) | (1<<2) | (1<<0); //выключаем 2 и 1 разряд
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	8d 60       	ori	r24, 0x0D	; 13
 19c:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<1); // включаем 1 разряд
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits[r2_100]; // сотни
 1a4:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <r2_100>
 1a8:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <r2_100+0x1>
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	e0 5a       	subi	r30, 0xA0	; 160
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	80 81       	ld	r24, Z
 1b6:	82 bb       	out	0x12, r24	; 18
 1b8:	8d ee       	ldi	r24, 0xED	; 237
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x82>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x88>
 1c2:	00 00       	nop

        _delay_ms(3);

        PORTB |= (1<<3) | (1<<1) | (1<<0); //выключаем 2 и 1 разряд
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	8b 60       	ori	r24, 0x0B	; 11
 1c8:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<2); // включаем 1 разряд
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits[r3_10]; // сотни
 1d0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <r3_10>
 1d4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <r3_10+0x1>
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	e0 5a       	subi	r30, 0xA0	; 160
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	80 81       	ld	r24, Z
 1e2:	82 bb       	out	0x12, r24	; 18
 1e4:	8d ee       	ldi	r24, 0xED	; 237
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0xae>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xb4>
 1ee:	00 00       	nop

        _delay_ms(3);

        PORTB |= (1<<2) |(1<<1) | (1<<0); //выключаем 2 и 1 разряд
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	87 60       	ori	r24, 0x07	; 7
 1f4:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1<<3); // включаем 1 разряд
 1f6:	88 b3       	in	r24, 0x18	; 24
 1f8:	87 7f       	andi	r24, 0xF7	; 247
 1fa:	88 bb       	out	0x18, r24	; 24
        SEG7_PORT = digits[r4_1]; // сотни
 1fc:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 200:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	e0 5a       	subi	r30, 0xA0	; 160
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	80 81       	ld	r24, Z
 20e:	82 bb       	out	0x12, r24	; 18
 210:	8d ee       	ldi	r24, 0xED	; 237
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 218:	00 c0       	rjmp	.+0      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 21a:	00 00       	nop

        _delay_ms(3);
        timer++;
 21c:	0f 5f       	subi	r16, 0xFF	; 255
 21e:	1f 4f       	sbci	r17, 0xFF	; 255
        if (timer == 10) {
 220:	0a 30       	cpi	r16, 0x0A	; 10
 222:	11 05       	cpc	r17, r1
 224:	09 f0       	breq	.+2      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 226:	9c cf       	rjmp	.-200    	; 0x160 <main+0x26>
            timer = 0;
            chislo_7seg = (chislo_7seg + 1) % 10000;
 228:	ae 01       	movw	r20, r28
 22a:	4f 5f       	subi	r20, 0xFF	; 255
 22c:	5f 4f       	sbci	r21, 0xFF	; 255
 22e:	9a 01       	movw	r18, r20
 230:	32 95       	swap	r19
 232:	22 95       	swap	r18
 234:	2f 70       	andi	r18, 0x0F	; 15
 236:	23 27       	eor	r18, r19
 238:	3f 70       	andi	r19, 0x0F	; 15
 23a:	23 27       	eor	r18, r19
 23c:	a7 e4       	ldi	r26, 0x47	; 71
 23e:	b3 e0       	ldi	r27, 0x03	; 3
 240:	16 d0       	rcall	.+44     	; 0x26e <__umulhisi3>
 242:	ec 01       	movw	r28, r24
 244:	d6 95       	lsr	r29
 246:	c7 95       	ror	r28
 248:	d6 95       	lsr	r29
 24a:	c7 95       	ror	r28
 24c:	d6 95       	lsr	r29
 24e:	c7 95       	ror	r28
 250:	20 e1       	ldi	r18, 0x10	; 16
 252:	37 e2       	ldi	r19, 0x27	; 39
 254:	c2 9f       	mul	r28, r18
 256:	c0 01       	movw	r24, r0
 258:	c3 9f       	mul	r28, r19
 25a:	90 0d       	add	r25, r0
 25c:	d2 9f       	mul	r29, r18
 25e:	90 0d       	add	r25, r0
 260:	11 24       	eor	r1, r1
 262:	ea 01       	movw	r28, r20
 264:	c8 1b       	sub	r28, r24
 266:	d9 0b       	sbc	r29, r25
        SEG7_PORT = digits[r4_1]; // сотни

        _delay_ms(3);
        timer++;
        if (timer == 10) {
            timer = 0;
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	79 cf       	rjmp	.-270    	; 0x160 <main+0x26>

0000026e <__umulhisi3>:
 26e:	a2 9f       	mul	r26, r18
 270:	b0 01       	movw	r22, r0
 272:	b3 9f       	mul	r27, r19
 274:	c0 01       	movw	r24, r0
 276:	a3 9f       	mul	r26, r19
 278:	01 d0       	rcall	.+2      	; 0x27c <__umulhisi3+0xe>
 27a:	b2 9f       	mul	r27, r18
 27c:	70 0d       	add	r23, r0
 27e:	81 1d       	adc	r24, r1
 280:	11 24       	eor	r1, r1
 282:	91 1d       	adc	r25, r1
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
